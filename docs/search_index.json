[["index.html", "Multi-Proxy Paleoecological Analysis Using R Welcome! 0.1 Study Methods 0.2 Study Site Description 0.3 Resources", " Multi-Proxy Paleoecological Analysis Using R Johanna Bosch 2024-03-05 Welcome! This book can be used to learn how to conduct a paleoecological analysis in R. The project methods described here are formally reviewed and cited in the following paper: Bosch J, Álvarez-Manzaneda I, Smol J, Michelutti N, Robertson GJ, Wilhelm SI, Montevecchi WA. 2024 Blending census and paleolimnological data allows for tracking the establishment and growth of a major gannet colony over several centuries. Proceedings of the Royal Society B [in review]. 0.1 Study Methods For this study, we gathered sediment records from a pond situated 240m upwind of the northern gannet (Morus bassanus) colony in Cape St Mary’s Ecological Reserve (Newfoundland, CA) that receives seabird nutrients. We reconstructed the population trends of the gannets using multiple proxies (δ15N, chlorophyll a, phosphorus, cadmium, zinc, ornithogenic diatoms) related to seabird nutrient inputs into freshwater catchments. By aligning shifts in seabird-related proxies to historical census data, we reveal how paleo-reconstructions can accurately follow known population counts. 0.2 Study Site Description Samples were taken from Cape St. Mary’s Ecological Reserve, in Newfoundland. The main nesting site within the Reserve is named Bird Rock. A review of the paleolimnological process at play are shown in the graphical abstract below. Two sediment cores were obtained for the study, one from the impacted pond (ID: CSM-IMP-2) ~240 m away from the colony, and another from a reference pond (study control, ID: CSM-REF-3) more than 1 km away from the colony. Figure 0.1: [Bosch et al. 2024]: Seabird nutrient transfer from Bird Rock, in Cape St. Mary’s Ecological Reserve (Newfoundland) to a pond nearby the seabird colony. Seen in the illustration are northern gannets (Morus bassanus) and black-legged kittiwakes (Rissa tridactyla), which both nest within the Reserve on an annual basis. Figure 0.2: [Bosch et al. 2024]: Map of sampling locations relative to Bird Rock 0.3 Resources 0.3.1 Download data Download some of the example data from my github repo - Paleo_Analysis_Using_R 0.3.2 Install packages Install all of the packages used in this analysis: REQUIRED: Tidyverse - Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). “Welcome to the tidyverse.” Journal of Open Source Software, 4(43), 1686. Tidypaleo:Dunnington DW, Libera N, Kurek J, Spooner IS, Gagnon GA (2022). “tidypaleo: Visualizing Paleoenvironmental Archives Using ggplot2.” Journal of Statistical Software, 101(7), 1–20. Vegan- Oksanen J, Simpson G, Blanchet F, Kindt R, Legendre P, Minchin P et al. (2022). vegan: Community Ecology Package. R package version 2.6-4 Ggplot2and Ggpubr- Wickham H (2016). ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, Dplyr- Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: A Grammar of Data Manipulation. R package version 1.1.4 Viridis- Garnier, Simon, Ross, Noam, Rudis, Robert, Camargo, Pedro A, Sciaini, Marco, Scherer, Cédric (2024). viridis(Lite) - Colorblind-Friendly Color Maps for R. doi:10.5281/zenodo.4679423, viridis package version 0.6.5 Note that installation may differ depending on the type of operating system you’re using. # to install the tidy packages on Ubuntu, start by opening your terminal and installing Libcurl and Vegan sudo apt-get install -y libxml2-dev libcurl4-openssl-dev libssl-dev libv8-dev sudo apt-get install -y r-cran-vegan "],["dating-profiles.html", "1 Dating Profiles 1.1 Getting Started 1.2 Load the data 1.3 Plot 210-Pb dating profiles 1.4 Final Figure", " 1 Dating Profiles 1.1 Getting Started Load the following packages library(ggplot2) library(dplyr) library(viridis) library(ggpubr) 1.2 Load the data I used data from the following files found in the Github repo FileS3_Dating_CSM-IMP.csv and FileS4_Dating_CSM-REF.csv. Access the files here. Load your data for impact and reference sites into R dp_IMP2 &lt;- read.csv(&quot;Data/FileS2_Dating_CSM-IMP.csv&quot;) dp_REF3 &lt;- read.csv(&quot;Data/FileS3_Dating_CSM-REF.csv&quot;) Define columns for core depth/year, activity, sedimentation rate (with error) in both files #core depth depth_IMP2 &lt;- dp_IMP2$midpoint depth_REF3 &lt;- dp_REF3$midpoint #core year year_IMP &lt;- dp_IMP2$year year_REF &lt;- dp_REF3$year #210-Pb activity act_IMP2 &lt;- dp_IMP2$activity act_REF3 &lt;- dp_REF3$activity # sedimentation rate sed_IMP2 &lt;- dp_IMP2$sedimetation_rate sed_REF3 &lt;- dp_REF3$sedimetation_rate error_IMP &lt;- dp_IMP2$sr_error error_REF &lt;- dp_REF3$sr_error 1.3 Plot 210-Pb dating profiles Plot the activity and sedimentation rate activity &lt;- ggplot() + geom_point(data = dp_IMP2, (aes(x= depth_IMP2, y=act_IMP2)), shape=22, fill=&quot;paleturquoise4&quot;, size=3, color = &quot;paleturquoise4&quot;, alpha=0.5) + geom_line(data = dp_IMP2, (aes(x = depth_IMP2, y=act_IMP2)), color=&quot;paleturquoise4&quot;) + geom_point(data = dp_REF3, (aes(x = depth_REF3, y=act_REF3)), size =3, color=&quot;palegreen3&quot;) + geom_line(data = dp_REF3, (aes(x = depth_REF3, y=act_REF3)), color=&quot;palegreen3&quot;) + labs(x=&quot;Midpoint depth (cm)&quot;, y=&quot;Pb-210 Activity (Bq/kg)&quot;) + scale_x_continuous(breaks=seq(0,19, by= 1), limits = c(0,19)) + theme_classic()+ theme(text = element_text(size = 12), panel.grid.major.x=element_line(), axis.text.y = element_text(size=12), axis.title.y = element_text(margin = margin(t=0, r= 20, b=0, l=0))) activity sed.rate &lt;- ggplot() + geom_point(data = dp_IMP2, (aes(x = depth_IMP2, y=sed_IMP2)),shape=21, color = &quot;paleturquoise4&quot;) + geom_line(data = dp_IMP2, (aes(x = depth_IMP2, y=sed_IMP2)), color=&quot;paleturquoise4&quot;) + geom_point(data = dp_REF3, (aes(x = depth_REF3, y=sed_REF3)), color=&quot;palegreen3&quot;) + geom_line(data = dp_REF3, (aes(x = depth_REF3, y=sed_REF3)), color=&quot;palegreen3&quot;) + labs(x = &quot;Core Depth (cm/yr)&quot;, y = &quot;Sedimentation rate (cm/yr)&quot;) + scale_x_continuous(breaks=seq(0,19, by= 1), limits = c(0,19)) + theme_classic() + theme(panel.grid.major.x=element_line(), text = element_text(size = 12), axis.text.y = element_text(size=12), axis.text.x = element_text(size=12), axis.title.y = element_text(margin = margin(t=0, r= 20, b=0, l=0))) par(mar = c(10, 10,10,10)) Plot year based on core depth year &lt;- ggplot() + geom_point(data = dp_IMP2, (aes(x = year_IMP, y= depth_IMP2)), na.rm=TRUE, shape=22, fill=&quot;paleturquoise4&quot;, size=3, color = &quot;paleturquoise4&quot;, alpha=0.5) + geom_line(data = dp_IMP2, (aes(x = year_IMP, y= depth_IMP2)), na.rm=TRUE, color = &quot;paleturquoise4&quot;) + stat_smooth(dp_IMP2, mapping=aes(year_IMP, depth_IMP2), method=&quot;lm&quot;) + geom_errorbar(aes(x=year_IMP, xmin=year_IMP-error_IMP, xmax=year_IMP+error_IMP, y=depth_IMP2, ymax=NULL, ymin=NULL), width=.2) + labs(x = &quot;Year (CRS model)&quot;, y = &quot;Midpoint depth (cm)&quot;) + scale_x_continuous(breaks=seq(1800,2023, by= 20)) + scale_y_reverse(breaks=seq(0,15, by=1), expand=c(0,0)) + theme_classic() + theme(panel.grid.major.x=element_line(), text = element_text(size = 12), axis.text.y = element_text(size=12), axis.text.x = element_text(size=12)) year 1.4 Final Figure ggarrange(activity, year, ncol = 1, nrow = 2, common.legend=TRUE,legend=c(&quot;top&quot;)) Figure 1.1: [Bosch et al. 2024]: 210-Pb activity (Bq/kg) over the depth of the impact core (CSM-IMP-2, blue squares) and the reference core (CSM-REF-3, green circles). The 210-Pb dates assigned to the midpoint depth of the cores using a constant rate of supply (CRS) dating model are shown in the smaller, inset graph, where pink trend lines represent the second order polynomial regression for each core. "],["breakpoint-analysis.html", "2 Breakpoint Analysis 2.1 Getting Started 2.2 Load and prepare the data 2.3 Plot the data 2.4 Final Figure", " 2 Breakpoint Analysis This is a breakpoint analysis in R for metal(loid) data obtained from individual coring sites. I used data containing more than 20 metals, and their concentrations at each depth of the impacted core. My data files can be found in the Github repo, called FileS8_Metalloids_CSM-IMP.csv and FileS9_Metalloids_CSM-REF.csv. Access the files here. 2.1 Getting Started Begin by installing all the required packages using install/packages() if you haven’t already. Once installed, load the packages in R #load the tidy libraries library(tidyverse) library(tidypaleo) library(vegan) 2.2 Load and prepare the data Load your data for impact and reference sites into R metals_IMP &lt;- read.csv(&quot;Data/FileS6_Metalloids_CSM-IMP.csv&quot;) metals_REF &lt;- read.csv(&quot;Data/FileS7_Metalloids_CSM-REF.csv&quot;) Transform the data into long format metals_long_IMP &lt;- metals_IMP %&gt;% pivot_longer(!depth, names_to = &quot;metals&quot;, values_to = &quot;concentration&quot;) Make sure depth column is numeric metals_long_IMP$depth &lt;- as.numeric(metals_long_IMP$depth) 2.3 Plot the data 2.3.1 Plot CONISSS Run the stratigraphically constrained cluster analysis on your data (CONISS) nested_coniss_IMP &lt;- metals_long_IMP %&gt;% nested_data(depth, metals, concentration) %&gt;% nested_chclust_coniss() Plot the cluster analysis results plot(nested_coniss_IMP) 2.3.2 Plot a broken stick diagram broken_stick_plot &lt;- nested_coniss_IMP %&gt;% select(broken_stick) %&gt;% unnest(broken_stick) %&gt;% tidyr::gather(type, value, broken_stick_dispersion, dispersion) %&gt;% ggplot(aes(x = n_groups, y = value, col = type)) + geom_line() + geom_point() 2.4 Final Figure Figure 2.1: [Bosch et al. 2024]: Dendrogram (LEFT) showing the distinct breakpoints in the metal(loid)s data across the core depth (cm) of CSM-IMP-2, and a line plot (RIGHT) showing the broken stick dispersion plot for the breakpoint analysis, where value is a measure of the magnitude of the variable being analyzed. Created using the tidyverse and tidypaleo packages available in R (v.4.2.1) software. "],["multi-site-stratigraphy.html", "3 Multi-Site Stratigraphy 3.1 Data Specifications 3.2 Getting Started 3.3 Formatting proxydata file 3.4 Plot the geochemical data 3.5 Plot the diatom abundance data 3.6 Arrange multiple stratigraphies 3.7 Adding points of interest 3.8 Change facets 3.9 Secondary axes 3.10 Final Figure", " 3 Multi-Site Stratigraphy Build a plot containing data for multiple proxies aligned by depth or year. Methods based off of - https://cran.r-project.org/web/packages/tidypaleo/vignettes/strat_diagrams.html 3.1 Data Specifications Data used in this analysis can be found in the github repo in the following files: FileS5_Impact_ProxyData.csv, FileS6_Reference_ProxyData.csv. Access the files here. 3.2 Getting Started Install and load these packages library(ggplot2) library(tidyverse) library(tidypaleo) library(ggh4x) Optional - set a theme theme_set(theme_paleo(8)) Set your working directory setwd(&quot;FILEPATH&quot;) 3.3 Formatting proxydata file For this analysis there should be two separate files for each site. View these example datasets to see how your data should be set up: # two spreadsheets in .csv format: #1) a spreadsheet containing all the geochem data, like this view(alta_lake_geochem) #2) a spreadsheet containing all the abundance data, like this view(keji_lakes_plottable) For the impact site I arranged my proxy data into geochem and abundance files according to the formatting from the example data and saved them as proxydata_geochem_IMP.csv and proxydata_abundance_IMP.csv. I did the same for the reference core. 3.4 Plot the geochemical data Begin with the impacted site geochem_IMP2 &lt;- read.csv(&quot;proxydata_geochem_IMP2.csv&quot;) Plot the base stratigraphic diagram for your geochem data geo_strat_IMP2 &lt;- ggplot(geochem_IMP2, aes(x = value, y = depth)) + geom_lineh() + geom_point() + facet_geochem_gridh(vars(param)) + labs(x = NULL, y = &quot;Depth (cm)&quot;) + facetted_pos_scales(x = list(scale_x_continuous(limits = c(0,0.00025)), scale_x_continuous(limits = c(0,0.15)), scale_x_continuous(limits = c(-2,11)), scale_x_continuous(limits = c(0,10000)), scale_x_continuous(limits = c(0,0.025))), scale_y_reverse(breaks=seq(0,17, by=1), limits = c(17,0))) geo_strat_IMP2 Now load data and plot the reference site geochem_REF3 &lt;- read.csv(&quot;proxydata_geochem_REF3.csv&quot;) Plot the base straitgraphic diagram for your geochem data geo_strat_REF3 &lt;- ggplot(geochem_REF3, aes(x = value, y = depth)) + geom_lineh() + geom_point() + facet_geochem_gridh(vars(param)) + labs(x = NULL, y = &quot;Depth (cm)&quot;) + facetted_pos_scales(x = list(scale_x_continuous(limits = c(0,0.00025)), scale_x_continuous(limits = c(0,0.15)), scale_x_continuous(limits = c(-2,11)), scale_x_continuous(limits = c(0,10000)), scale_x_continuous(limits = c(0,0.025))), scale_y_reverse(breaks=seq(0,17, by=1), limits = c(17,0))) geo_strat_REF3 3.5 Plot the diatom abundance data For the impact site: diatoms_IMP2 &lt;- read.csv(&quot;proxydata_diatoms_IMP2.csv&quot;) #plot the base straitgraphic diagram for your geochem data diatom_strat_IMP2 &lt;- ggplot(diatoms_IMP2, aes(x = rel_abund, y = depth)) + geom_areah() + geom_col_segsh() + facet_abundanceh(vars(taxon), grouping = vars(location), rotate_facet_labels = 0) + labs(x = NULL, y = &quot;Depth (cm)&quot;) + facetted_pos_scales(x = list(scale_x_abundance(limits = c(0,100)), scale_x_abundance(limits = c(0,100))), scale_y_reverse(limits = c(17,0))) diatom_strat_IMP2 Load the abundance data for the REF3 site diatoms_REF3 &lt;- read.csv(&quot;proxydata_diatoms_REF3.csv&quot;) Plot the base straitgraphic diagram for your geochem data diatom_strat_REF3 &lt;- ggplot(diatoms_REF3, aes(x = rel_abund, y = depth)) + geom_areah() + geom_col_segsh() + facet_abundanceh(vars(taxon), grouping = vars(location), rotate_facet_labels = 0) + labs(x = NULL, y = &quot;Depth (cm)&quot;) + facetted_pos_scales(x = list(scale_x_abundance(limits = c(0,100)), scale_x_abundance(limits = c(0,100))), scale_y_reverse(limits = c(17,0))) diatom_strat_REF3 3.6 Arrange multiple stratigraphies Use patchwork to put all the plots together on the same figure library(patchwork) Plot the abundance and geochem data together for the IMP2 site strat_final_IMP2 &lt;- wrap_plots(geo_strat_IMP2 + theme(strip.background = element_blank(), strip.text.y = element_blank()), diatom_strat_IMP2 + theme(axis.text.y.left = element_blank(), axis.ticks.y.left = element_blank()) + labs(y = NULL), nrow = 1, widths = c(3, 1)) strat_final_IMP2 Plot the abundance and geochem data together for the REF3 site strat_final_REF3 &lt;- wrap_plots(geo_strat_REF3 + theme(strip.background = element_blank(), strip.text.y = element_blank()), diatom_strat_REF3 + theme(axis.text.y.left = element_blank(), axis.ticks.y.left = element_blank()) + labs(y = NULL), nrow = 1, widths = c(3, 1)) strat_final_REF3 Plot all of the sites together final_strat &lt;- wrap_plots(strat_final_IMP2,strat_final_REF3, nrow=2, ncol=1) final_strat After plotting, make sure that all your data is aligned properly with the depth axis, make sure you have set your limits in the scale_y_reverse(limits = c()) argument to be fixed to the max scale depth 3.7 Adding points of interest strat_final &lt;- strat_final + geom_hline(yintercept = c(0, 4, 8, 12, 16), col = &quot;red&quot;, lty = 2, alpha = 1) 3.8 Change facets If you want to change the position of facets in any of the datasets use mutate geo_strat %&gt;% mutate(param = fct_relevel(param, &quot;chla&quot;, &quot;Cd/Al&quot;, &quot;Zn/Al&quot;)) %&gt;% ggplot(aes(x = value, y = depth)) + ... 3.9 Secondary axes If you want to add year as secondary y-axis create an age-depth model geo_adm &lt;- age_depth_model(geochem, depth = depth, age = age) geo_strat + scale_y_depth_age(geo_adm, age_name = &quot;year&quot;) 3.10 Final Figure Figure 3.1: [Bosch et al. 2024]: Multi-proxy stratigraphy of the impact pond core [A] and reference pond core [B]. The secondary y-axis shows the 210Pb dates that were assigned to selected layers of the core using the CRS model, and the dates are aligned by midpoint depth (cm). Grey shaded bars across the stratigraphy represent the period gannets are known to be nesting in Cape St. Mary’s, based on the data found in File S1. "],["generalized-additive-models.html", "4 Generalized Additive Models 4.1 Getting Started 4.2 Fitting GAMs using mgcv 4.3 Plotting the final GAM 4.4 Final Figure", " 4 Generalized Additive Models Data used in this analysis can be found in the github repo in the following files: FileS4_Impact_ProxyData.xlsx, FileS5_Reference_ProxyData.xlsx. Access the files here. Each proxy should have a seperate file containing z_score data, which I used in the analysis. 4.1 Getting Started Install the following packages mgcv, analogue, ggplot2, mvnfast, gratia, viridis If you’re using ubuntu, run this first to install the dependency RCPArmadillo and mvnfast for gratia sudo apt-get update -y sudo apt-get install -y r-cran-rcpparmadillo sudo apt-get install -y r-cran-mvnfast Load packages library(mgcv) # For gams library(ggplot2) # For plotting library(analogue) # For general use and support of other packages library(gratia) # For derivatives to identify significant periods of change library(viridis) # Package to use colours 4.2 Fitting GAMs using mgcv Here I use the mixed model approach via restricted maximum likelihood (REML). Start by loading a local function for first derivatives signifD &lt;- function(x, d, upper, lower, eval = 0) { miss &lt;- upper &gt; eval &amp; lower &lt; eval incr &lt;- decr &lt;- x want &lt;- d &gt; eval incr[!want | miss] &lt;- NA want &lt;- d &lt; eval decr[!want | miss] &lt;- NA list(incr = incr, decr = decr) } 4.2.1 Chlorophyll a data Read the chlorophyll a data into R: pd_chlA &lt;-read.csv(&quot;chlA.csv&quot;) head(pd_chlA) Check that data looks correct 4.2.1.1 Apply the REML function to your data chlA_gam&lt;-gam(chlA~s(year, k = 26), data= pd_chlA, method=&quot;REML&quot;) gam.check(chlA_gam) Plot your results plot(chlA_gam) And now add standard error fit_gcv&lt;- predict(chlA_gam, data = pd_chlA, se.fit = TRUE, length.out=200) crit.t &lt;- qt(0.975, df.residual(chlA_gam)) chlA_new &lt;- data.frame(Year = pd_chlA[[&quot;year&quot;]], fit = fit_gcv$fit, se.fit = fit_gcv$se.fit) chlA_new &lt;- transform(chlA_new, upper = fit + (crit.t * se.fit), lower = fit - (crit.t * se.fit)) 4.2.1.2 Transform your data You need equal lengths everywhere (i.e., 200 rows) for the following functions to work chlA_new_sigperiod&lt;-data.frame(approx(chlA_new$Year, chlA_new$fit, n=200)) colnames(chlA_new_sigperiod)&lt;-c(&quot;Year&quot;, &quot;fit&quot;) Check that it looks right using head(chlA_new_sigperiod) 4.2.1.3 Identify significant changes Identify derivatives of significant value chlA_der&lt;-derivatives(chlA_gam, type=&quot;central&quot;, n=200) draw(chlA_der) chlA_sig&lt;-signifD(chlA_new_sigperiod$fit, d= chlA_der$derivative, chlA_der$upper, chlA_der$lower) chlA_sig 4.2.1.4 Plot the results chlA&lt;-ggplot()+ geom_ribbon(data=chlA_new, mapping= aes(x= Year, ymax= upper, ymin=lower), fill=&quot;#b3e0ff&quot;, inherit.aes = FALSE, alpha=0.5)+ geom_line(data= chlA_new, mapping=aes(y= fit, x= Year), colour=&quot;lightblue4&quot;)+ geom_line(data= chlA_new_sigperiod, mapping=aes(y=BTP_chlA_sig$decr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of increase geom_line(data=chlA_new_sigperiod, mapping=aes(y=BTP_chlA_sig$incr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of decrease geom_point(data=pd_chlA, aes(y=chlA, x= year), shape= 21, fill= &quot;#0099cc&quot;, colour=&quot;lightblue4&quot;, size = 0.5)+ scale_x_continuous(breaks=seq(1000,2022, by= 100), limits = c(1000,2022))+ ylim(c(-0.01, 0.16))+ labs(x=NULL, y=NULL) + theme_classic() + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.line.x=element_blank(), text = element_text(size = 10, face = &quot;bold&quot;)) chlA Now do the same for every other proxy, here my dataset includes data for d15N, d13C, Phosphorus, Zinc/Al, Cadmium/Al, and relative abundance of two dominant diatom species. 4.2.2 d15N pd_d15N &lt;-read.csv(&quot;d15N.csv&quot;) head(pd_d15N) #Check that data looks correct d15N_gam&lt;-gam(d15N~s(year, k = 20), data= pd_d15N, method=&quot;REML&quot;) gam.check(d15N_gam) plot(d15N_gam) fit_gcv&lt;- predict(d15N_gam, data = pd_d15N, se.fit = TRUE, length.out=200) crit.t &lt;- qt(0.975, df.residual(d15N_gam)) d15N_new &lt;- data.frame(Year = pd_d15N[[&quot;year&quot;]], fit = fit_gcv$fit, se.fit = fit_gcv$se.fit) d15N_new &lt;- transform(d15N_new, upper = fit + (crit.t * se.fit), lower = fit - (crit.t * se.fit)) d15N_new_sigperiod&lt;-data.frame(approx(d15N_new$Year, d15N_new$fit, n=200)) colnames(d15N_new_sigperiod)&lt;-c(&quot;Year&quot;, &quot;fit&quot;) head(d15N_new_sigperiod) # Check that it looks right. BTP_d15N_der&lt;-derivatives(d15N_gam, type=&quot;central&quot;, n=200) draw(BTP_d15N_der) BTP_d15N_sig&lt;-signifD(d15N_new_sigperiod$fit, d= BTP_d15N_der$derivative, BTP_d15N_der$upper, BTP_d15N_der$lower) BTP_d15N_sig d15N&lt;-ggplot()+ geom_ribbon(data=d15N_new, mapping= aes(x= Year, ymax= upper, ymin=lower), fill=&quot;#b3e0ff&quot;, inherit.aes = FALSE, alpha=0.5)+ geom_line(data= d15N_new, mapping=aes(y= fit, x= Year), colour=&quot;lightblue4&quot;)+ geom_line(data= d15N_new_sigperiod, mapping=aes(y=BTP_d15N_sig$decr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of increase geom_line(data=d15N_new_sigperiod, mapping=aes(y=BTP_d15N_sig$incr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of decrease geom_point(data=pd_d15N, aes(y= d15N, x= year), shape= 21, fill= &quot;#0099cc&quot;, colour=&quot;lightblue4&quot;, size = 0.5)+ scale_x_continuous(breaks=seq(1000,2022, by= 100), limits = c(1000,2022))+ ylim(c(-2, 13))+ labs(x=NULL, y=NULL) + theme_classic() + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.line.x=element_blank(), text = element_text(size = 10, face = &quot;bold&quot;)) d15N 4.2.3 d13C pd_d13C &lt;-read.csv(&quot;d13C.csv&quot;) head(pd_d13C) #Check that data looks correct d13C_gam&lt;-gam(d13C~s(year, k = 19), data= pd_d13C, method=&quot;REML&quot;) gam.check(d13C_gam) plot(d13C_gam) fit_gcv&lt;- predict(d13C_gam, data = pd_d13C, se.fit = TRUE, length.out=200) crit.t &lt;- qt(0.975, df.residual(d13C_gam)) d13C_new &lt;- data.frame(Year = pd_d13C[[&quot;year&quot;]], fit = fit_gcv$fit, se.fit = fit_gcv$se.fit) d13C_new &lt;- transform(d13C_new, upper = fit + (crit.t * se.fit), lower = fit - (crit.t * se.fit)) d13C_new_sigperiod&lt;-data.frame(approx(d13C_new$Year, d13C_new$fit, n=200)) colnames(d13C_new_sigperiod)&lt;-c(&quot;Year&quot;, &quot;fit&quot;) head(d13C_new_sigperiod) BTP_d13C_der&lt;-derivatives(d13C_gam, type=&quot;central&quot;, n=200) draw(BTP_d13C_der) BTP_d13C_sig&lt;-signifD(d13C_new_sigperiod$fit, d= BTP_d13C_der$derivative, BTP_d13C_der$upper, BTP_d13C_der$lower) BTP_d13C_sig d13C&lt;-ggplot()+ geom_ribbon(data=d13C_new, mapping= aes(x= Year, ymax= upper, ymin=lower), fill=&quot;#b3e0ff&quot;, inherit.aes = FALSE, alpha=0.5)+ geom_line(data= d13C_new, mapping=aes(y= fit, x= Year), colour=&quot;lightblue4&quot;)+ geom_line(data= d13C_new_sigperiod, mapping=aes(y=BTP_d13C_sig$decr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of increase geom_line(data=d13C_new_sigperiod, mapping=aes(y=BTP_d13C_sig$incr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of decrease geom_point(data=pd_d13C, aes(y= d13C, x= year), shape= 21, fill= &quot;#0099cc&quot;, colour=&quot;lightblue4&quot;, size = 0.5)+ theme(text = element_text(size = 10, face = &quot;bold&quot;)) + ylab(&quot;d13C&quot;)+ xlab(&quot;year Year (cm)&quot;)+ scale_x_continuous(breaks=seq(1000,2022, by= 100), limits = c(1000,2022))+ ylim(c(-28, -23))+ labs(x=NULL, y=NULL) + theme_classic() + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.line.x=element_blank(), text = element_text(size = 10, face = &quot;bold&quot;)) d13C 4.2.4 Phosphorus pd_metals &lt;-read.csv(&quot;metals.csv&quot;) head(pd_metals) P_gam&lt;-gam(P~s(year, k = 15), data= pd_metals, method=&quot;REML&quot;) gam.check(P_gam) plot(P_gam) fit_gcv&lt;- predict(P_gam, data = pd_metals, se.fit = TRUE, length.out=200) crit.t &lt;- qt(0.975, df.residual(P_gam)) P_new &lt;- data.frame(Year = pd_metals[[&quot;year&quot;]], fit = fit_gcv$fit, se.fit = fit_gcv$se.fit) P_new &lt;- transform(P_new, upper = fit + (crit.t * se.fit), lower = fit - (crit.t * se.fit)) P_new_sigperiod&lt;-data.frame(approx(P_new$Year, P_new$fit, n=200)) colnames(P_new_sigperiod)&lt;-c(&quot;Year&quot;, &quot;fit&quot;) BTP_P_der&lt;-derivatives(P_gam, type=&quot;central&quot;, n=200) draw(BTP_P_der) BTP_P_sig&lt;-signifD(P_new_sigperiod$fit, d= BTP_P_der$derivative, BTP_P_der$upper, BTP_P_der$lower) BTP_P_sig P&lt;-ggplot()+ geom_ribbon(data=P_new, mapping= aes(x= Year, ymax= upper, ymin=lower), fill=&quot;#b3e0ff&quot;, inherit.aes = FALSE, alpha=0.5)+ geom_line(data= P_new, mapping=aes(y= fit, x= Year), colour=&quot;lightblue4&quot;)+ geom_line(data= P_new_sigperiod, mapping=aes(y=BTP_P_sig$decr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of increase geom_line(data=P_new_sigperiod, mapping=aes(y=BTP_P_sig$incr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of decrease geom_point(data=pd_metals, aes(y=P, x= year), shape= 21, fill= &quot;#0099cc&quot;, colour=&quot;lightblue4&quot;, size = 0.5)+ theme(text = element_text(size = 10, face = &quot;bold&quot;)) + ylab(&quot;&quot;)+ xlab(&quot;year&quot;)+ scale_x_continuous(breaks=seq(1000,2022, by= 100), limits = c(1000,2022))+ ylim(c(-3000, 15000))+ labs(x=NULL, y=NULL) + theme_classic() + theme(text = element_text(size = 10, face = &quot;bold&quot;)) P 4.2.5 Zinc/Al and Cd/Al pd_metals &lt;-read.csv(&quot;metals.csv&quot;) head(pd_metals) Zn_gam&lt;-gam(Zn~s(year, k = 15), data= pd_metals, method=&quot;REML&quot;) gam.check(Zn_gam) plot(Zn_gam) fit_gcv&lt;- predict(Zn_gam, data = pd_metals, se.fit = TRUE, length.out=200) crit.t &lt;- qt(0.975, df.residual(Zn_gam)) Zn_new &lt;- data.frame(Year = pd_metals[[&quot;year&quot;]], fit = fit_gcv$fit, se.fit = fit_gcv$se.fit) Zn_new &lt;- transform(Zn_new, upper = fit + (crit.t * se.fit), lower = fit - (crit.t * se.fit)) Zn_new_sigperiod&lt;-data.frame(approx(Zn_new$Year, Zn_new$fit, n=200)) colnames(Zn_new_sigperiod)&lt;-c(&quot;Year&quot;, &quot;fit&quot;) head(Zn_new_sigperiod) BTP_Zn_der&lt;-derivatives(Zn_gam, type=&quot;central&quot;, n=200) draw(BTP_Zn_der) BTP_Zn_sig&lt;-signifD(Zn_new_sigperiod$fit, d= BTP_Zn_der$derivative, BTP_Zn_der$upper, BTP_Zn_der$lower) BTP_Zn_sig Zn &lt;-ggplot() + geom_ribbon(data=Zn_new, mapping= aes(x= Year, ymax= upper, ymin=lower), fill=&quot;#b3e0ff&quot;, inherit.aes = FALSE, alpha=0.5) + geom_line(data= Zn_new, mapping=aes(y= fit, x= Year), colour=&quot;lightblue4&quot;) + geom_line(data= Zn_new_sigperiod, mapping=aes(y=BTP_Zn_sig$decr, x=Year), colour=&quot;deepskyblue4&quot;, size=1) + ## Periods of increase geom_line(data=Zn_new_sigperiod, mapping=aes(y=BTP_Zn_sig$incr, x=Year), colour=&quot;deepskyblue4&quot;, size=1) + ## Periods of decrease geom_point(data=pd_metals, aes(y= Zn, x= year), shape= 21, fill= &quot;#0099cc&quot;, colour=&quot;lightblue4&quot;, size = 0.5) + theme(text = element_text(size = 10, face = &quot;bold&quot;)) + ylab(&quot;&quot;)+ xlab(&quot;&quot;)+ scale_x_continuous(breaks=seq(1000,2022, by= 100), limits = c(1000,2022))+ ylim(c(0.00006, 0.015)) + labs(x=NULL, y=NULL) + theme_classic() + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.line.x=element_blank(), text = element_text(size = 10, face = &quot;bold&quot;)) Zn pd_metals &lt;-read.csv(&quot;metals.csv&quot;) head(pd_metals) Cd_gam&lt;-gam(Cd~s(year, k = 15), data= pd_metals, method=&quot;REML&quot;) gam.check(Cd_gam) plot(Cd_gam) fit_gcv&lt;- predict(Cd_gam, data = pd_metals, se.fit = TRUE, length.out=200) crit.t &lt;- qt(0.975, df.residual(Cd_gam)) Cd_new &lt;- data.frame(Year = pd_metals[[&quot;year&quot;]], fit = fit_gcv$fit, se.fit = fit_gcv$se.fit) Cd_new &lt;- transform(Cd_new, upper = fit + (crit.t * se.fit), lower = fit - (crit.t * se.fit)) Cd_new_sigperiod&lt;-data.frame(approx(Cd_new$Year, Cd_new$fit, n=200)) colnames(Cd_new_sigperiod)&lt;-c(&quot;Year&quot;, &quot;fit&quot;) head(Cd_new_sigperiod) BTP_Cd_der&lt;-derivatives(Cd_gam, type=&quot;central&quot;, n=200) draw(BTP_Cd_der) BTP_Cd_sig&lt;-signifD(Cd_new_sigperiod$fit, d= BTP_Cd_der$derivative, BTP_Cd_der$upper, BTP_Cd_der$lower) BTP_Cd_sig Cd&lt;-ggplot()+ geom_ribbon(data=Cd_new, mapping= aes(x= Year, ymax= upper, ymin=lower), fill=&quot;#b3e0ff&quot;, inherit.aes = FALSE, alpha=0.5)+ geom_line(data= Cd_new, mapping=aes(y= fit, x= Year), colour=&quot;lightblue4&quot;)+ geom_line(data= Cd_new_sigperiod, mapping=aes(y=BTP_Cd_sig$decr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of increase geom_line(data=Cd_new_sigperiod, mapping=aes(y=BTP_Cd_sig$incr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of decrease geom_point(data=pd_metals, aes(y= Cd, x= year), shape= 21, fill= &quot;#0099cc&quot;, colour=&quot;lightblue4&quot;, size = 0.5)+ theme(text = element_text(size = 10, face = &quot;bold&quot;)) + scale_x_continuous(breaks=seq(1000,2022, by= 100), limits = c(1000,2022))+ ylim(c(0.05e-05, 3e-04))+ labs(x=NULL, y=NULL) + theme_classic()+ theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.line.x=element_blank(), text = element_text(size = 10, face = &quot;bold&quot;)) Cd 4.2.6 Diatom (S.construens) pd_diatoms &lt;-read.csv(&quot;diatoms.csv&quot;) head(pd_diatoms) S.cons_gam&lt;-gam(S.construens~s(year, k = 17), data= pd_diatoms, method=&quot;REML&quot;) gam.check(S.cons_gam) plot(S.cons_gam) fit_gcv&lt;- predict(S.cons_gam, data = pd_diatoms, se.fit = TRUE, length.out=200) crit.t &lt;- qt(0.975, df.residual(S.cons_gam)) S.cons_new &lt;- data.frame(Year = pd_diatoms[[&quot;year&quot;]], fit = fit_gcv$fit, se.fit = fit_gcv$se.fit) S.cons_new &lt;- transform(S.cons_new, upper = fit + (crit.t * se.fit), lower = fit - (crit.t * se.fit)) S.cons_new_sigperiod&lt;-data.frame(approx(S.cons_new$Year, S.cons_new$fit, n=200)) colnames(S.cons_new_sigperiod)&lt;-c(&quot;Year&quot;, &quot;fit&quot;) head(S.cons_new_sigperiod) BTP_S.cons_der&lt;-derivatives(S.cons_gam, type=&quot;central&quot;, n=200) draw(BTP_S.cons_der) BTP_S.cons_sig&lt;-signifD(S.cons_new_sigperiod$fit, d= BTP_S.cons_der$derivative, BTP_S.cons_der$upper, BTP_S.cons_der$lower) BTP_S.cons_sig S.cons&lt;-ggplot()+ geom_ribbon(data=S.cons_new, mapping= aes(x= Year, ymax= upper, ymin=lower), fill=&quot;#b3e0ff&quot;, inherit.aes = FALSE, alpha=0.5)+ geom_line(data= S.cons_new, mapping=aes(y= fit, x= Year), colour=&quot;lightblue4&quot;)+ geom_line(data= S.cons_new_sigperiod, mapping=aes(y=BTP_S.cons_sig$decr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of increase geom_line(data=S.cons_new_sigperiod, mapping=aes(y=BTP_S.cons_sig$incr, x=Year), colour=&quot;deepskyblue4&quot;, size=1)+ ## Periods of decrease geom_point(data=pd_diatoms, aes(y= S.construens, x= year), shape= 21, fill= &quot;#0099cc&quot;, colour=&quot;lightblue4&quot;, size = 0.5)+ scale_x_continuous(breaks=seq(1000,2022, by= 100), limits = c(1000,2022))+ ylim(c(-15, 115))+ labs(x=NULL, y=NULL) + theme_classic()+ theme(text = element_text(size = 10, face = &quot;bold&quot;)) S.cons 4.3 Plotting the final GAM library(ggpubr) ggarrange(chlA, Zn, d13C, Cd, d15N, P, S.cons, ncol = 2, nrow = 4, heights=5, widths=5) 4.4 Final Figure Figure 4.1: [Bosch et al. 2024]: Proxy data from the impact core fitted with a generalized additive model (GAM) and aligned with extrapolated 210Pb-dates. Bolded blue lines represent significant periods of change and shaded blue areas represent the confidence intervals. "],["multiproxy-analysis-vs.-nesting-pairs.html", "5 Multiproxy Analysis vs. Nesting Pairs 5.1 Getting Started 5.2 Example for calculating Z-Scores 5.3 Load the data 5.4 Plot the proxy data 5.5 Plot the population data 5.6 Arrange the figures together 5.7 Final Figure", " 5 Multiproxy Analysis vs. Nesting Pairs Data used in this analysis can be found in the github repo in the following files: FileS2_MonitoringData.csv and FileS7_ZScores_CSM-IMP.csv. 5.1 Getting Started Required pkgs for the analysis: library(ggplot2) library(dplyr) library(viridis) library(ggpubr) library(tidyverse) 5.2 Example for calculating Z-Scores Here is one example of how you can calculate the average d15N and standard deviation of d15N: # Define your data d15N &lt;- IMP2_isotopes$d15N percentN &lt;- IMP2_isotopes$N.percent d13C &lt;- IMP2_isotopes$d15N percentC &lt;- IMP2_isotopes$C.percent # calculate z-scores for d15N and d13C Zscore_isotopes &lt;- IMP2_isotopes %&gt;% mutate(d15N_z = (d15N - mean(d15N))/sd(d15N), d13C_z = (d13C - mean(d13C))/sd(d13C), percentN_z = (percentN - mean(percentN))/sd(percentN), percentN_z = (percentN - mean(percentN))/sd(percentN)) Export the values to a .csv or excel file write.csv(Zscore_isotopes, &quot;filename&quot;) 5.3 Load the data Here I load data for the impact site only. After calculating z-scores for the d15N, d15C, chlorophyll a, phosphorus, cadmium , zinc and diatom abundance data (only for S.construens), I arranged it into a file called z-scores.csv. The .csv file I am working is called z-scores.csv, set up like this: midpoint d15N z_d15N chla z_chla etc… Mean - - - - - - - NOTE: Make sure the file contains a column to plot arithmetic mean. Load the data in R zscores &lt;- read.csv(&quot;Data/FileS7_ZScores_CSM-IMP.csv&quot;) The colony population data can be found in the Census data file, and contains counts for each species by year. Year Northern gannet Black-legged kittiwake Common murre 1883 … 2023 Read the population data into R from another .csv file, mine is in a file called /Data popn &lt;- read.csv(&quot;Data/FileS2_MonitoringData.csv&quot;) 5.4 Plot the proxy data Plot each of your proxies using both geom_line and geom_point to plot a line graph for your data. z_plot &lt;- ggplot() + geom_smooth(zscores, mapping=aes(x=year, y=mean), method=&quot;lm&quot;, na.rm=TRUE, formula = y ~ poly(x, 2), color=&quot;lightgrey&quot;, fill=&quot;lightgrey&quot;, linetype = 0) + scale_x_continuous(breaks=seq(1800,2023, by=10), limits = c(1800,2025), position=&quot;top&quot;) + #plot mean line (move this to the last line if you want the mean line to lay overtop your proxy data) geom_line(data=zscores[!is.na(zscores$mean),], mapping=aes(x=year, y=mean), color=&quot;black&quot;, linewidth=1,) + #plot chlorophyll data geom_line(data=zscores[!is.na(zscores$z_chla),], mapping=aes(x=year, y=z_chla), color=&quot;green&quot;) + geom_point(data=zscores, mapping=aes(x=year, y=z_chla), color=&quot;green&quot;, shape=16, size=2) + #plot d15N data geom_line(data=zscores[!is.na(zscores$z_d15N),], mapping=aes(x=year, y=z_d15N), color=&quot;blue3&quot;) + geom_point(data=zscores, mapping=aes(x=year, y=z_d15N), color=&quot;blue3&quot;, shape=4, size=2) + #plot Phosphorus data geom_line(data=zscores[!is.na(zscores$z_P),], mapping=aes(x=year, y=z_P), color=&quot;orange&quot;) + geom_point(data=zscores, mapping=aes(x=year, y=z_P), color=&quot;orange&quot;, shape=15, size=2) + #plot Zinc data geom_line(data=zscores[!is.na(zscores$z_Zn),], mapping=aes(x=year, y=z_Zn), color=&quot;firebrick1&quot;) + geom_point(data=zscores, mapping=aes(x=year, y=z_Zn), color=&quot;firebrick1&quot;, shape=25, size=2) + #plot Cadmium data geom_line(data=zscores[!is.na(zscores$Z_Cd),], mapping=aes(x=year, y=Z_Cd), color=&quot;red4&quot;) + geom_point(data=zscores, mapping=aes(x=year, y=Z_Cd), color=&quot;red4&quot;, shape=17, size=2) + #plot diatom data geom_line(data=zscores[!is.na(zscores$z_S.cons),], mapping=aes(x=year, y=z_S.cons), color=&quot;mediumaquamarine&quot;) + geom_point(data=zscores, mapping=aes(x=year, y=z_S.cons), color=&quot;mediumaquamarine&quot;, shape=20, size=2) + #set a theme theme_classic()+ theme(panel.grid.major.x=element_line(), text = element_text(size = 12), axis.text.x.top= element_text(vjust=0.5, angle=90, color = &quot;black&quot;), axis.text.y = element_text(color = &quot;black&quot;), axis.title.x = element_blank())+ #set axis labels xlab(NULL)+ ylab(&quot;z-score&quot;) Run z_plot to view the figure. Here I used !is.na to ignore all NA values in the dataset. You can use HTML color codes in place for R colors for more options. 5.5 Plot the population data Define each variable NOGA &lt;- popn$Northern.gannet COMU &lt;- popn$Common.murre BLKI &lt;- popn$Black.legged.kittiwake year &lt;- popn$Year Plot using ggplot popn_plot &lt;- ggplot(popn, (aes(x=year))) + geom_point(aes(y=BLKI), width=1, color=&quot;hotpink3&quot;, size=2) + geom_line(aes(y=BLKI), position = &quot;stack&quot;, color = &quot;hotpink3&quot;, size = 0.5, linetype=&quot;dotted&quot;) + geom_point(aes(y=NOGA), width=1, color=&quot;slateblue4&quot;, size=2) + geom_line(aes(y=NOGA), position = &quot;stack&quot;, color = &quot;slateblue4&quot;, size = 0.5, linetype=&quot;dotted&quot;) + geom_point(aes(y=COMU), width=1, color=&quot;olivedrab4&quot;, size=2) + geom_line(aes(y=COMU), position = &quot;stack&quot;, color = &quot;olivedrab4&quot;, size = 0.5, linetype=&quot;dotted&quot;) + scale_x_continuous(breaks=seq(1800,2023, by=10), limits = c(1800,2025), position=&quot;bottom&quot;) + scale_y_continuous(breaks=seq(0,16000, by=4000)) + ylab(&quot;nesting pairs&quot;)+ theme_classic()+ theme(panel.grid.major.x=element_line(), text = element_text(size = 12, color = &quot;black&quot;), axis.text.x = element_text(margin = margin(t=1), color = &quot;black&quot;), axis.text.y = element_text(margin = margin(t=1), color = &quot;black&quot;), axis.title.x = element_blank(), axis.text.x.bottom = element_text(vjust=0.5, angle=90)) 5.6 Arrange the figures together Plot both your population counts and proxy data onto the same figure ggarrange(z_plot, popn_plot, ncol = 1, nrow = 2, heights=c(15,12), align=&quot;hv&quot;) 5.7 Final Figure Figure 5.1: [Bosch et al. 2024]: Summary of ornithogenic proxies measured in the impact pond, with Z-score values represented as points [top figure]. X-axis dates are extrapolated from 210Pb dates via polynomial regression. The thick black line shows the calculated arithmetic mean, fitted with a polynomial regression using ggplot2 in R. and the shaded grey area represents the confidence interval. A cut-off was set at ca. 1808 CE (~11.25 cm) to ensure data continuity due to variations in proxy data depth. Historical monitoring data for Northern gannets (Morus bassanus), common murres (Uria aalge) and black-legged kittiwakes (Rissa tridactyla) nesting on Bird Rock and surrounding mainland areas (File S1) [bottom figure]. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
